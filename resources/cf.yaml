AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This CloudFormation template creates the underlying infrastructure
  to support the OHIF Viewer with AWS HealthImaging.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Configuration
        Parameters:
          - VPCCIDRBlock
          - SubnetACIDRBlock
          - SubnetBCIDRBlock
    ParameterLabels:
      VPCCIDRBlock:
        default: VPC CIDR Block
      SubnetACIDRBlock:
        default: Subnet A CIDR Block
      SubnetBCIDRBlock:
        default: Subnet B CIDR Block
Parameters:
  VPCCIDRBlock:
    Description: The CIDR block of the VPC, IPv4 CIDR block with size must be between /16 and /28 netmask.
    Type: String
    Default: 10.0.0.0/16
    ConstraintDescription: Malformed input-parameter VPCVIDRBlock must match IPv4 CIDR block with size between /16 and /28 netmask.
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}($|/(16|17|18|19|20|21|22|23|24|25|26|27|28))'
  SubnetACIDRBlock:
    Description: The CIDR block of the subnet A, IPv4 CIDR block with size must be between /16 and /28 netmask (must be within the VPC CIDR Block netmask).
    Type: String
    Default: 10.0.0.0/24
    ConstraintDescription: Malformed input-parameter SubnetACIDRBlock must match IPv4 CIDR block with size between /16 and /28 netmask (must be within the VPC CIDR Block netmask).
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}($|/(16|17|18|19|20|21|22|23|24|25|26|27|28))'
  SubnetBCIDRBlock:
    Description: The CIDR block of the subnet B, IPv4 CIDR block with size must be between /16 and /28 netmask (must be within the VPC CIDR Block netmask).
    ConstraintDescription: Malformed input-parameter SubnetBCIDRBlock must match IPv4 CIDR block with size between /16 and /28 netmask (must be within the VPC CIDR Block netmask).
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}($|/(16|17|18|19|20|21|22|23|24|25|26|27|28))'
Resources:
  IAMUserReadOnlyHealthImaging:
    Type: AWS::IAM::User
    Properties:
      UserName: user-ohif-healthimaging-readonly
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSHealthImagingReadOnlyAccess
  IAMUserReadOnlyHealthImagingAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUserReadOnlyHealthImaging
  OhifProxyTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ohif-proxy-task-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSHealthImagingReadOnlyAccess
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ohif-ecs-execution-role-${AWS::AccountId}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  ECSExecutionRoleInlinePolicy:
    Type: AWS::IAM::RolePolicy
    DependsOn: ECSExecutionRole
    Properties:
      PolicyName: !Sub ohif-ecs-execution-role-inline-policy-${AWS::AccountId}
      RoleName: !Sub ohif-ecs-execution-role-${AWS::AccountId}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:ecs/ohif_proxy:log-stream:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:ecs/ohif-proxy:log-stream:*:*
  OHIFContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ohif-container-security-group
      GroupDescription: OHIF Proxy Container Security Group
      VpcId: !Ref OHIFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8089
          ToPort: 8089
          SourceSecurityGroupId: !Ref OHIFApplicationLoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
  OHIFApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ohif-application-load-balancer-security-group
      GroupDescription: OHIF Application Load Balancer Security Group
      VpcId: !Ref OHIFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
  S3HealthImagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ohif-healthimaging-data-${AWS::AccountId}
  S3HostingOHIFBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ohif-viewer-hosting-${AWS::AccountId}
  OHIFHealthImagingDataStore:
    Type: AWS::HealthImaging::Datastore
    Properties:
      DatastoreName: !Sub ohif-healthimaging-datastore-${AWS::AccountId}
  CloudFrontResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub ohif-viewer-hosting-${AWS::AccountId}
        CorsConfig:
          AccessControlAllowCredentials: false
          AccessControlAllowHeaders:
            Items:
              - '*'
          AccessControlAllowMethods:
            Items:
              - ALL
          AccessControlAllowOrigins:
            Items:
              - '*'
          OriginOverride: true
        CustomHeadersConfig:
          Items:
            - Header: Cache-Control
              Value: "no-cache"
              Override: false
            - Header: Cross-Origin-Opener-Policy
              Value: "same-origin"
              Override: false
            - Header: Cross-Origin-Embedder-Policy
              Value: "require-corp"
              Override: false
  CloudFrontS3OriginAccessControl:
    DependsOn: S3HostingOHIFBucket
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ohif-viewer-hosting-${AWS::AccountId}.s3.amazonaws.com
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ohif-viewer-hosting-${AWS::AccountId}.s3.amazonaws.com
            Id: S3-ohif-viewer-hosting
            OriginAccessControlId: !Ref CloudFrontS3OriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
          - DomainName: !Sub ohif-proxy-load-balancer-${AWS::AccountId}.${AWS::Region}.elb.amazonaws.com
            Id: OHIF-Proxy-Load-Balancer
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
            OriginCustomHeaders:
              - HeaderName: X-OHIF-Custom-Header
                HeaderValue: !Select [2, !Split ['/', !Ref AWS::StackId]]
        Enabled: "true"
        Comment: CloudFront Distribution pointing to S3 bucket and Application Load Balancer
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          TargetOriginId: S3-ohif-viewer-hosting
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ResponseHeadersPolicyId: !GetAtt CloudFrontResponseHeadersPolicy.Id
        CacheBehaviors:
          - PathPattern: /datastore/*
            TargetOriginId: OHIF-Proxy-Load-Balancer
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
            ResponseHeadersPolicyId: !GetAtt CloudFrontResponseHeadersPolicy.Id
  S3HostingOHIFBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3HostingOHIFBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${S3HostingOHIFBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}"
  OHIFProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ohif-proxy-target-group
      VpcId: !Ref OHIFVPC
      TargetType: ip
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "404"
  OHIFProxyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
              StatusCode: "403"
              ContentType: text/plain
              MessageBody: "Must access from CloudFront Distribution"
      LoadBalancerArn: !Ref OHIFProxyLoadBalancer
      Port: 80
      Protocol: HTTP
  OHIFProxyListenerForwardRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref OHIFProxyListener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref OHIFProxyTargetGroup
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-OHIF-Custom-Header
            Values:
              - !Select [2, !Split ['/', !Ref AWS::StackId]]
      Priority: 1
  OHIFProxyAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: OHIFProxyECSService
    Properties:
      MaxCapacity: 6
      MinCapacity: 1
      ResourceId: service/OHIF-Proxy-ECS-Cluster/ohif-proxy-ecs-service
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  OHIFProxyAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ohif-proxy-auto-scaling-policy
      PolicyType: TargetTrackingScaling
      ResourceId: service/OHIF-Proxy-ECS-Cluster/ohif-proxy-ecs-service
      ScalingTargetId: !Ref OHIFProxyAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        TargetValue: 0.7
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  OHIFProxyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: IGTWAttachment
    Properties:
      Name: ohif-proxy-load-balancer
      Type: application
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      SecurityGroups:
        - !Ref OHIFApplicationLoadBalancerSecurityGroup
  OhifProxyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "512"
      Memory: "1024"
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt OhifProxyTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: ohif_proxy
          Image: flexview/ohif-healthlake-proxy
          PortMappings:
            - ContainerPort: 8089
              HostPort: 8089
              Protocol: tcp
              AppProtocol: http
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-group: "ecs/ohif_proxy"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_ACCESS_KEY_ID
              Value: !Ref IAMUserReadOnlyHealthImagingAccessKey
            - Name: AWS_SECRET_ACCESS_KEY
              Value: !GetAtt IAMUserReadOnlyHealthImagingAccessKey.SecretAccessKey
            - Name: AWS_REGION
              Value: !Ref AWS::Region
  OHIFProxyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: OHIF-Proxy-ECS-Cluster
  OHIFProxyECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - OHIFProxyListener
    Properties:
      Cluster: !Ref OHIFProxyECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref OhifProxyTaskDefinition
      ServiceName: ohif-proxy-ecs-service
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: ohif_proxy
          ContainerPort: 8089
          TargetGroupArn: !Ref OHIFProxyTargetGroup
          LoadBalancerName: !Ref AWS::NoValue
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref OHIFContainerSecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      EnableECSManagedTags: true
  IGW:
    Type: AWS::EC2::InternetGateway
  OHIFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      InstanceTenancy: default
  IGTWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref OHIFVPC
      InternetGatewayId: !Ref IGW
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetACIDRBlock
      AvailabilityZone: !Select [ 0, !GetAZs ]
      VpcId: !Ref OHIFVPC
      MapPublicIpOnLaunch: true
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref SubnetBCIDRBlock
      AvailabilityZone: !Select [ 1, !GetAZs ]
      VpcId: !Ref OHIFVPC
      MapPublicIpOnLaunch: true
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref OHIFVPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGTWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref PublicRouteTable
Outputs:
  CloudFrontDistributionDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: ohif-domain-name
  HealthImagingDatastoreID:
    Value: !GetAtt OHIFHealthImagingDataStore.DatastoreId
    Export:
      Name: ohif-healthimaging-datastore-id